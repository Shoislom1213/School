name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint-c:
    name: C Code Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Clang-Format
        run: sudo apt-get update && sudo apt-get install clang-format -y
      - name: Run Clang-Format
        run: |
          find src/ -name "*.c" -o -name "*.h" | xargs clang-format --dry-run --Werror

  lint-python:
    name: Python Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install linters
        run: pip install black flake8
      - name: Run linters
        run: |
          if [ -d "ai_module/" ]; then
            black --check ai_module/
            flake8 ai_module/
          else
            echo "ai_module/ directory not found, skipping Python linting."
          fi

  build:
    name: Build C Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Clean Build Directory
        run: |
          rm -rf build/
          mkdir build
      - name: Compile
        run: |
          gcc -Wall -Wextra -Werror -o build/program src/*.c

  valgrind:
    name: Run Valgrind
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install valgrind -y
      - name: Run Valgrind
        run: |
          gcc -g -o build/program src/*.c
          if [ -f "test-ci.txt" ]; then
            valgrind --leak-check=full --error-exitcode=1 ./build/program < test-ci.txt
          else
            echo "test-ci.txt not found, skipping Valgrind tests."
          fi

  sanitizer:
    name: Run Address & Leak Sanitizer
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Run with ASAN & LSAN
        run: |
          gcc -fsanitize=address,leak -g -o build/program src/*.c
          if [ -f "test-ci.txt" ]; then
            ./build/program < test-ci.txt
          else
            echo "test-ci.txt not found, skipping sanitizer tests."
          fi

  ai-test:
    name: AI Module Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install AI dependencies
        run: pip install torch tensorflow onnxruntime pytest
      - name: Run AI Tests
        run: |
          if [ -d "ai_module/" ]; then
            python ai_module/test_model.py
            pytest ai_module/tests/
          else
            echo "ai_module/ directory not found, skipping AI tests."
          fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install lcov -y
      - name: Run Coverage
        run: |
          mkdir -p build
          gcc --coverage -o build/program src/*.c
          if [ -f "test-ci.txt" ]; then
            ./build/program < test-ci.txt || true
            gcov src/*.c
            lcov --capture --directory . --output-file coverage.info
          else
            echo "test-ci.txt not found, skipping coverage."
          fi
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.info

  security:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Run Trivy on Source
        run: |
          if [ -d "src/" ]; then
            echo "Scanning src/ directory with Trivy..."
            docker run --rm -v $(pwd):/project aquasec/trivy:latest fs --scanners vuln /project/src/
          else
            echo "src/ directory not found, skipping scan."
          fi

          if [ -d "ai_module/" ]; then
            echo "Scanning ai_module/ directory with Trivy..."
            docker run --rm -v $(pwd):/project aquasec/trivy:latest fs --scanners vuln /project/ai_module/
          else
            echo "ai_module/ directory not found, skipping scan."
          fi
